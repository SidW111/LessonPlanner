import React, { useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { generatePDF } from "@/utils/pdfGenerator";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
import DarkModeToggle from "@/components/DarkModeToggle";

interface LessonData {
    topic: string;
    date: string;
    subject: string;
    gradeLevel: string;
    mainConcept: string;
    materials: string;
    learningObjectives: string;
    assessment: string;
    notes: string;
    lessonOutline: string;
    lessonOutlineItems: { id: string; content: string }[];
  }

interface LessonPlanProps {
  lessonData: LessonData;
  setLessonData: (data: any) => void;
}

const LessonPlan: React.FC<LessonPlanProps> = ({ lessonData, setLessonData }) => {
  // ✅ Ensure `lessonOutlineItems` always exists as an array
  useEffect(() => {
    if (!lessonData.lessonOutlineItems || !Array.isArray(lessonData.lessonOutlineItems)) {
      setLessonData((prev: any) => ({
        ...prev,
        lessonOutlineItems: [
          { id: "1", content: "Introduction" },
          { id: "2", content: "Main Discussion" },
          { id: "3", content: "Activity" },
          { id: "4", content: "Assessment" },
        ],
      }));
    }
  }, [lessonData, setLessonData]);

  const handleChange = (field: string, value: string) => {
    setLessonData((prev: any) => ({
      ...prev,
      [field]: value,
      lessonOutlineItems: prev.lessonOutlineItems || [],
    }));
  };

  const handleDragEnd = (result: any) => {
    if (!result.destination) return;
    const newItems = Array.from(lessonData.lessonOutlineItems || []);
    const [movedItem] = newItems.splice(result.source.index, 1);
    newItems.splice(result.destination.index, 0, movedItem);
    
    setLessonData((prev: any) => ({
      ...prev,
      lessonOutlineItems: newItems,
    }));
  };

  return (
    <div className="p-6 bg-white dark:bg-gray-900 dark:text-white min-h-screen transition">
      <DarkModeToggle />
      <h2 className="text-xl font-bold mb-4">Editable Lesson Plan</h2>

      <Card className="p-6 shadow-md">
        <label className="font-semibold">Topic:</label>
        <Input value={lessonData.topic} onChange={(e) => handleChange("topic", e.target.value)} className="mb-2" />

        <label className="font-semibold">Date:</label>
        <Input type="date" value={lessonData.date} onChange={(e) => handleChange("date", e.target.value)} className="mb-2" />

        <label className="font-semibold">Subject:</label>
        <Input value={lessonData.subject} onChange={(e) => handleChange("subject", e.target.value)} className="mb-2" />

        <label className="font-semibold">Grade Level:</label>
        <Input value={lessonData.gradeLevel} onChange={(e) => handleChange("gradeLevel", e.target.value)} className="mb-2" />

        <label className="font-semibold">Main Concept & Subtopics:</label>
        <Textarea value={lessonData.mainConcept} onChange={(e) => handleChange("mainConcept", e.target.value)} className="mb-2" />

        <label className="font-semibold">Materials Needed:</label>
        <Textarea value={lessonData.materials} onChange={(e) => handleChange("materials", e.target.value)} className="mb-2" />

        <label className="font-semibold">Learning Objectives:</label>
        <Textarea value={lessonData.learningObjectives} onChange={(e) => handleChange("learningObjectives", e.target.value)} className="mb-2" />

        <label className="font-semibold">Assessment:</label>
        <Textarea value={lessonData.assessment} onChange={(e) => handleChange("assessment", e.target.value)} className="mb-2" />

        <label className="font-semibold">Notes:</label>
        <Textarea value={lessonData.notes} onChange={(e) => handleChange("notes", e.target.value)} className="mb-2" />
      </Card>

      {/* AI-Generated Lesson Plan Section */}
      <Card className="p-6 shadow-md mt-6 bg-gray-100 dark:bg-gray-800 dark:text-white">
        <h3 className="text-lg font-bold mb-2">Lesson Plan (Generated by AI)</h3>
        <div
          className="p-4 rounded-md bg-white dark:bg-gray-900 dark:text-white border border-gray-300 dark:border-gray-600"
          dangerouslySetInnerHTML={{
            __html: (lessonData.lessonOutline || "")
              .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
              .replace(/\n/g, "<br>")
              .replace(/- (.*?)/g, "• $1")
              .replace(/\|([^|]+)\|([^|]+)\|([^|]+)\|/g, "<tr><td class='border p-2 dark:border-gray-500'>$1</td><td class='border p-2 dark:border-gray-500'>$2</td><td class='border p-2 dark:border-gray-500'>$3</td></tr>")
          }}
        />
      </Card>

      {/* Drag and Drop Lesson Outline */}
      <Card className="p-6 shadow-md mt-6">
        <h3 className="text-lg font-bold mb-2">Drag-and-Drop Lesson Outline</h3>
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="lessonOutline">
            {(provided) => (
              <div ref={provided.innerRef} {...provided.droppableProps} className="space-y-2">
                {lessonData.lessonOutlineItems && lessonData.lessonOutlineItems.length > 0 ? (
                  lessonData.lessonOutlineItems.map((item: any, index: number) => (
                    <Draggable key={String(item.id)} draggableId={String(item.id)} index={index}>
                      {(provided) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                          className="p-3 border rounded shadow bg-white dark:bg-gray-800 cursor-grab"
                        >
                          {item.content}
                        </div>
                      )}
                    </Draggable>
                  ))
                ) : (
                  <p className="text-gray-500 dark:text-gray-400">No lesson outline items available</p>
                )}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </Card>

      {/* Download PDF Button */}
      <Button
        onClick={() =>
          generatePDF({
            ...lessonData,
            lessonOutline: lessonData.lessonOutline
              .replace(/\*\*(.*?)\*\*/g, "$1")
              .replace(/<br>/g, "\n")
              .replace(/• /g, "- ")
              .replace(/\|/g, " | ")
              .replace(/\n{2,}/g, "\n"),
          })
        }
        className="mt-4 w-full bg-green-500"
      >
        Download as PDF
      </Button>
    </div>
  );
};

export default LessonPlan;
